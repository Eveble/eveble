name: Pull Request

env:
  isFork: ${{ github.event.pull_request.head.repo.full_name != github.repository }}

on: [pull_request]

jobs:
  assign_reviewers:
    runs-on: ubuntu-latest
    name: üë©üèº‚Äçüî¨ Assign reviewers
    steps:
      - uses: kentaro-m/auto-assign-action@v1.2.5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  misspell:
    runs-on: ubuntu-latest
    name: üìù Fix misspells
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: 'US'
          ignore: optimise
  lint_commits:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: üîé Lint commits
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5
      - name: [failed] üè∑Ô∏è Remove conventional label
        uses: actions/github-script@v6
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'conventional') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'conventional'
              })
            }
      - name: [success] üè∑Ô∏è Add conventional label
        uses: actions/github-script@v6
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['conventional']
            })
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    env:
      USERNAME: ${{ github.event.github.actor }}
      MONGO_URI: mongodb://admin:password@172.17.0.1:27017/eveble?replicaSet=rs0&authSource=admin&directConnection=true
    name: ‚úÖ Test
    steps:
      - uses: actions/checkout@v3

      - name: üê≥ Start MongoDB Replica Set
        run: |
          # Start MongoDB with replica set and authentication
          docker run --rm -d \
            -p 27017:27017 \
            --name mongodb-rs \
            -e MONGO_INITDB_ROOT_USERNAME=admin \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            mongo:6.0 \
            mongod --replSet rs0 --bind_ip_all

          # Wait for MongoDB to be ready
          echo "Waiting for MongoDB to be ready..."
          for i in {1..60}; do
            if docker exec mongodb-rs mongosh --quiet --eval "db.adminCommand('ping').ok" > /dev/null 2>&1; then
              echo "MongoDB is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Timeout waiting for MongoDB to start"
              docker logs mongodb-rs
              exit 1
            fi
            echo "Attempt $i/60..."
            sleep 2
          done

          # Initialize replica set using Docker bridge gateway IP
          echo "Initializing replica set..."
          docker exec mongodb-rs mongosh -u admin -p password --authenticationDatabase admin --eval \
            'rs.initiate({_id: "rs0", members: [{_id: 0, host: "172.17.0.1:27017"}]})'

          # Wait for replica set to be ready
          echo "Waiting for replica set to be ready..."
          for i in {1..30}; do
            if docker exec mongodb-rs mongosh --quiet -u admin -p password --authenticationDatabase admin --eval "rs.status().ok" 2>/dev/null | grep -q "1"; then
              echo "Replica set is ready!"
              break
            fi
            echo "Waiting for replica set... ($i/30)"
            sleep 2
          done

          # Verify replica set status
          echo "Replica set status:"
          docker exec mongodb-rs mongosh -u admin -p password --authenticationDatabase admin --eval 'rs.status()'

      - name: ‚öôÔ∏è Setup Node@${{ matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: ${{ env.USERNAME }}

      - name: üöß Install dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.EVEBLE_TYPES_AUTH_TOKEN }}

      - run: yarn test

      - name: [failed] üè∑Ô∏è Remove test label
        uses: actions/github-script@v6
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'tested') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'tested'
              })
            }

      - name: [success] üè∑Ô∏è Add test label
        uses: actions/github-script@v6
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['tested']
            })

  test_coverage:
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ github.event.github.actor }}
      MONGO_URI: mongodb://admin:password@172.17.0.1:27017/eveble?replicaSet=rs0&authSource=admin&directConnection=true
    name: üìà Validate test coverage
    steps:
      - uses: actions/checkout@v3

      - name: üê≥ Start MongoDB Replica Set
        run: |
          # Start MongoDB with replica set and authentication
          docker run --rm -d \
            -p 27017:27017 \
            --name mongodb-rs \
            -e MONGO_INITDB_ROOT_USERNAME=admin \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            mongo:6.0 \
            mongod --replSet rs0 --bind_ip_all

          # Wait for MongoDB to be ready
          echo "Waiting for MongoDB to be ready..."
          for i in {1..60}; do
            if docker exec mongodb-rs mongosh --quiet --eval "db.adminCommand('ping').ok" > /dev/null 2>&1; then
              echo "MongoDB is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Timeout waiting for MongoDB to start"
              docker logs mongodb-rs
              exit 1
            fi
            echo "Attempt $i/60..."
            sleep 2
          done

          # Initialize replica set using Docker bridge gateway IP
          echo "Initializing replica set..."
          docker exec mongodb-rs mongosh -u admin -p password --authenticationDatabase admin --eval \
            'rs.initiate({_id: "rs0", members: [{_id: 0, host: "172.17.0.1:27017"}]})'

          # Wait for replica set to be ready
          echo "Waiting for replica set to be ready..."
          for i in {1..30}; do
            if docker exec mongodb-rs mongosh --quiet -u admin -p password --authenticationDatabase admin --eval "rs.status().ok" 2>/dev/null | grep -q "1"; then
              echo "Replica set is ready!"
              break
            fi
            echo "Waiting for replica set... ($i/30)"
            sleep 2
          done

          # Verify replica set status
          echo "Replica set status:"
          docker exec mongodb-rs mongosh -u admin -p password --authenticationDatabase admin --eval 'rs.status()'

      - name: ‚öôÔ∏è Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com/'
          scope: ${{ env.USERNAME }}

      - name: üöß Install dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.EVEBLE_TYPES_AUTH_TOKEN }}

      - run: yarn test:coverage

      - run: yarn coverage:ci # Generate coverage.lcov report

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.lcov
          fail_ci_if_error: true

      - name: [failed] üè∑Ô∏è Remove covered label
        uses: actions/github-script@v6
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'covered') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'covered'
              })
            }

      - name: [success] üè∑Ô∏è Add covered label
        uses: actions/github-script@v6
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['covered']
            })
  test_lint:
    name: Test lint(with reviewdog)
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ github.event.github.actor }}
    steps:
      - uses: actions/checkout@v3
      - name: Lint and report push
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          eslint_flags: 'src/**/*.ts'
      - name: [failed] üè∑Ô∏è Remove linted label
        uses: actions/github-script@v6
        if: failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'linted') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'linted'
              })
            }
      - name: [success] üè∑Ô∏è Add linted label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['linted']
            })
  format:
    name: Format and push code back
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      USERNAME: ${{ github.event.github.actor }}
    steps:
      - uses: actions/checkout@v3 # checkout for forks
        if: contains(env.isFork, 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3 # checkout for PR
        if: contains(env.isFork, 'false')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: ‚öôÔ∏è Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com/'
          scope: ${{ env.USERNAME }}
      - name: üöß  Install dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.EVEBLE_TYPES_AUTH_TOKEN }}
      - run: yarn test:format
      - name: Format and commit changes if check failed
        if: failure() && github.actor != 'github-actions' && contains(env.isFork, 'false')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn format
          sudo yarn clean
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff-index --quiet HEAD || git commit --allow-empty -m "style: add format changes ü§ñ" -a
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:refs/heads/${{ github.head_ref }} && exit 0
      - name: [failed] üè∑Ô∏è Remove formatted label
        uses: actions/github-script@v6
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'formatted') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'formatted'
              })
            }
      - name: [success] üè∑Ô∏è Add formatted label
        uses: actions/github-script@v6
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['formatted']
            })
  assign_authors:
    name: Assign authors
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3 # checkout for forks
        if: contains(env.isFork, 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3 # checkout for PR
        if: contains(env.isFork, 'false')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Update AUTHORS file
        if: github.actor != 'github-actions' && contains(env.isFork, 'false')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"
          git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS
          sed -i '/semantic-release-bot/d' AUTHORS
          sed -i '/GitHub <noreply@github.com>/d' AUTHORS
          sed -i '/github.com/d' AUTHORS
          sed -i '/dependabot/d' AUTHORS
          git add -A
          git diff-index --quiet HEAD || git commit --allow-empty -m "chore: update AUTHORS üìì" -a
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:refs/heads/${{ github.head_ref }} && exit 0
  build:
    runs-on: ubuntu-latest
    name: Build
    env:
      USERNAME: ${{ github.event.github.actor }}
    steps:
      - uses: actions/checkout@v3
      - name: ‚öôÔ∏è Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com/'
          scope: ${{ env.USERNAME }}
      - name: üöß  Install dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.EVEBLE_TYPES_AUTH_TOKEN }}
      - run: yarn build
      - name: [failed] üè∑Ô∏è Remove builds label
        uses: actions/github-script@v6
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'builds') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'builds'
              })
            }
      - name: [success] üè∑Ô∏è Add builds label
        uses: actions/github-script@v6
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['builds']
            })
  build_docs:
    runs-on: ubuntu-latest
    name: üìÑ Build documentation
    env:
      USERNAME: ${{ github.event.github.actor }}
    steps:
      - uses: actions/checkout@v3
      - name: ‚öôÔ∏è Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com/'
          scope: ${{ env.USERNAME }}
      - name: üöß  Install dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.EVEBLE_TYPES_AUTH_TOKEN }}
      - name: üöß  Install dependencies on Docusaurus
        run: |
          cd ./website
          yarn install
      - run: yarn docs:build
      - name: [failed] üè∑Ô∏è Remove documented label
        uses: actions/github-script@v6
        if: failure() && contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ contains(github.event.pull_request.labels.*.name, 'documented') }}' == 'true') {
              github.issues.removeLabel({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
                name: 'documented'
              })
            }
      - name: [success] üè∑Ô∏è Add documented label
        uses: actions/github-script@v6
        if: contains(env.isFork, 'false')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
              labels: ['documented']
            })
