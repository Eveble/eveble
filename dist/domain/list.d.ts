import { types } from '../types';
import { SOURCE_KEY, LIST_KEY, SERIALIZABLE_TYPE_KEY } from '../constants/literal-keys';
export declare class List<T extends types.Serializable> extends Array {
    protected [SOURCE_KEY]: types.Serializable;
    protected [LIST_KEY]: string;
    protected [SERIALIZABLE_TYPE_KEY]: T;
    constructor(source: types.Serializable, listKey: string, serializableType: types.Type, serializables: any[]);
    toPlainObject(): any[];
    create(...sources: Record<string, any>[]): T;
    add(element: T): void;
    overrideBy(key: string, value: any, element: T): void;
    getBy(key: string, value: any): T | undefined;
    getByOrThrow(key: string, value: any): T;
    getById(id: string | types.Stringifiable): T | undefined;
    getByIdOrThrow(id: string | types.Stringifiable): T;
    findById(id: string | types.Stringifiable): T;
    findBy(key: string, value: any): T;
    hasBy(key: string, value: any): boolean;
    hasSame(element: T): boolean;
    hasById(id: string | types.Stringifiable): boolean;
    replaceById(id: string | types.Stringifiable, element: T): void;
    replaceBy(key: string, value: any, element: T): void;
    removeById(id: string | types.Stringifiable): void;
    removeBy(key: string, value: any): void;
    first(): T | undefined;
    last(): T | undefined;
    protected getSourceIdAsString(): string | undefined;
    getSource(): types.Serializable;
    getListKey(): string;
    getSerializableType(): types.Type;
}
